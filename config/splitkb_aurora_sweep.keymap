/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MO_TO(layer) &mo_to layer layer
#define AS(keycode) &as LS(keycode) keycode

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <150>;
            key-positions = <31 32>;
            bindings = <&kp DEL>;
            layers = <0 4>;
        };
    };

    macros {
        bt_mac: bt_mac {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0>, <&macro_param_1to2>, <&bt BT_SEL MACRO_PLACEHOLDER>;
        };
        bt_win: bt_win {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 4>, <&macro_param_1to2>, <&bt BT_SEL MACRO_PLACEHOLDER>;
        };
        alttab: alttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_release &kp LALT &kp TAB>
                ;
        };
        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHIFT>;
        };
    };

    behaviors {
        lhhm: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <175>;
	    require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;    // <---[[right-hand keys]]
	    hold-trigger-on-release;
        };

        rhhm: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <175>;
	    require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;    // <---[[left-hand keys]]
	    hold-trigger-on-release;
        };

        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mac_td_mo_to: mac_td_mo_to {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <MO_TO(1)>, <MO_TO(2)>;
        };


        win_td_mo_to: win_td_mo_to {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <MO_TO(5)>, <MO_TO(6)>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        kp_spc: kp_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&spc_morph>;
        };
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };



    };

    keymap {
        compatible = "zmk,keymap";

        mac_default_layer {
            bindings = <
                &kp Q &kp W &kp F &kp P &kp B                       &kp J &kp L &kp U &kp Y &kp SEMICOLON
                &lhhm LCTRL A &lhhm LALT R &lhhm LGUI S &lhhm LSHFT T &kp G                       &kp M &rhhm RSHFT N &rhhm RGUI E &rhhm RALT I &rhhm RCTRL O
                &kp Z &kp X &kp C &kp D &kp V                       &kp K &kp H  &kp CMMA &kp DOT &kp SLASH
                                &smart_shft &kp_spc ENTER 0           &bspc_del &mac_td_mo_to
            >;
        };

        mac_num_layer {
            bindings = <
                AS(N1) AS(N2) AS(N3) AS(N4) AS(N5)              AS(N6) AS(N7) AS(N8) AS(N9) AS(N0)
                &lhhm LCTRL LT &lhhm LALT LBKT &lhhm LGUI LS(LBKT) &lhhm LSHFT LS(N9) &kp SQT                       &kp DQT &rhhm RSHFT LS(N0) &rhhm RGUI LS(RBKT) &rhhm RALT RBKT &rhhm RCTRL GT
                &kp TAB &kp ESC &kp BSLH &kp MINUS &kp GRAVE          &kp TILDE &kp EQUAL &kp CMMA &kp DOT &kp SLASH
                &to 0 &kp_spc ENTER 0                             &bspc_del MO_TO(2)
            >;
		};

        mac_fkeys {
            bindings = <
                &kp ESC &none &kp TAB &none &kp CAPSLOCK                     &kp ESC &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END
                &kp LCTRL &kp LALT &kp LGUI &kp LSHFT &kp F6                 &kp F7 &kp LEFT &kp DOWN &kp UP &kp RIGHT
                &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                           &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
                &to 0 &kp SPACE                             &bspc_del MO_TO(3)
            >;
		};

        mac_bt {
            bindings = <
                &kp Z  &kp N2 &kp N3 &kp N4 &kp B       &bt_win 0 &bt_mac 1 &bt_win 2 &bt_win 3 &bt_win 4
                &kp Q  &kp W &kp E &kp R &kp G       &bt BT_CLR &kp C_PP &kp C_PREV &kp C_NEXT &kp C_MUTE
                &kp TAB  &kp ESC &kp Y &kp V &kp U       &alttab &to 4 &kp C_VOL_DN &kp C_VOL_UP &out OUT_TOG
                &kp D &kp F  					                            &to 0 &to 0
            >;
		};

        win_default_layer {
            bindings = <
                &kp Q &kp W &kp F &kp P &kp B                       &kp J &kp L &kp U &kp Y &kp SEMICOLON
                &lhhm LGUI A &lhhm LALT R &lhhm LCTRL S &lhhm LSHFT T &kp G                       &kp M &rhhm RSHFT N &rhhm RCTRL E &rhhm RALT I &rhhm RGUI O
                &kp Z &kp X &kp C &kp D &kp V                       &kp K &kp H  &kp CMMA &kp DOT &kp SLASH
                                &smart_shft &kp_spc ENTER 0            &bspc_del &win_td_mo_to
            >;
        };

        win_num_layer {
            bindings = <
                AS(N1) AS(N2) AS(N3) AS(N4) AS(N5)              AS(N6) AS(N7) AS(N8) AS(N9) AS(N0)
                &lhhm LCTRL LT &lhhm LALT LBKT &lhhm LGUI LS(LBKT) &lhhm LSHFT LS(N9) &kp SQT                       &kp DQT &rhhm RSHFT LS(N0) &rhhm RGUI LS(RBKT) &rhhm RALT RBKT &rhhm RCTRL GT
                &kp TAB &kp ESC &kp BSLH &kp MINUS &kp GRAVE          &kp TILDE &kp EQUAL &kp CMMA &kp DOT &kp SLASH
                &to 4 &kp_spc ENTER 0                             &bspc_del MO_TO(6) 
            >;
		};

        win_fkeys {
            bindings = <
                &kp ESC &none &kp TAB &none &kp CAPSLOCK                     &kp ESC &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END
                &kp LGUI &kp LALT &kp LCTRL &kp LSHFT &kp F6                 &kp F7 &kp LEFT &kp DOWN &kp UP &kp RIGHT
                &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                           &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
                &to 4 &kp SPACE                             &bspc_del MO_TO(7)
            >;
		};

        win_bt {
            bindings = <
                &kp Z  &kp N2 &kp N3 &kp N4 &kp B       &bt_win 0 &bt_mac 1 &bt_win 2 &bt_win 3 &bt_win 4
                &kp Q  &kp W &kp E &kp R &kp G       &bt BT_CLR &kp C_PP &kp C_PREV &kp C_NEXT &kp C_MUTE
                &kp TAB  &kp ESC &kp Y &kp V &kp U       &alttab &to 0 &kp C_VOL_DN &kp C_VOL_UP &out OUT_TOG
                &kp D &kp F  					                            &to 4 &to 4
            >;
		};

    };
};
